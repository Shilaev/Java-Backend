## Общие принципы
1. Какие знаете шаблоны проектирования? Расскажите о двух шаблонах, которые использовали в работе.
2. В чем преимущества и недостатки ООП, если сравнивать с процедурным/функциональным программированием?
3. Чем отличается агрегация от композиции?
4. Какие паттерны GoF вы использовали на практике? Приведите примеры.
5. SOLID
6. Патерны проектирования


## Java Core
1. Какие есть типы данных в Java?
2. Чем отличается объект от примитивных типов данных?
    Автоупаковка - преобразование примитивного типа в соответствующий объект. Начиная с JDK5, эта функция стала автоматическая. 
    ```Java 
    Integer integer = 9;
    ```
    Распаковка - преобразование объектов в соответствующие примитивные типы. 
    ```Java 
    int in = 9; 
    in = new Integer(9);
    ```
    Примитивные типы находятся в стеке, быстро доступны. Ссылочные типы находятся в куче и относительно медленно доступны. У примитивных методов нет методов, которые доступны соответствующим Объектам. При сравнении объектов - сравниваются ссылки, а при сравнении примитивов сравнивются значения.

3. В чем разница передачи параметров по ссылке и по значению?
    При передачи параметров по ссылке, передается ссылка, на место в памяти, где находится находится само значение. И в дальнейшем будет меняться значение, но ссылка останется неизменной.
    В случае, когда передается значение, то передается копия значения. То есть дальнейшая работа будет происходить с дубликатом.

4. Что такое JVM, JDK, JRE?
5. Зачем используют JVM?
6. Что такое bytecode?
7. Какие признаки JavaBean?
8. Что такое OutOfMemoryError?
9.  Что такое стектрейс? Как его получить?
10. Назовите все методы класса object.
11. В чем отличие между try-with-resources и try-catch-finally при работе с ресурсами?
12. Что такое конструкторы? Какие типы знаете?
13. Что такое побитовые операции?
14. Объекты каких стандартных классов immutable в Java?
15. Дайте краткую характеристику immutable object. Зачем они нужны?
16. Как создать immutable object?
17. Какие преимущества immutable object перед обычными объектами?


## ООП
1. Что такое ООП? Назовите принципы с примерами.
2. В чем преимущества ООП перед процедурным программированием?
3. В чем заключается главная особенность ООП?
4. Расскажите, какие преимущества мы получаем при использовании ООП?
5. Расскажите, какие есть недостатки в ООП?
6. Расскажите о принципе наследования в ООП? Зачем он нужен?
7. Дайте определение принципа полиморфизма в ООП? Как работает полиморфизм?
8. Что такое статический и динамический полиморфизм?
9. Дайте определение принципа абстракции в ООП.
10. Какие элементы языка отвечают за инкапсуляцию?
11. Какие элементы языка отвечают за наследование?
12. Какие элементы языка отвечают за полиморфизм?
13. Что такое SOLID? Приведите примеры.
14. Что такое перегрузки (overloading) метода?
15. Что такое переопределение (override) метода?
16. Что такое класс, объект, интерфейс?
17. Что такое класс POJO? Приведите пример такого класса.
18. Какие элементы могут содержать класс?
19. Дайте определение объекта.
20. Расскажите о наследовании в Java. Какие особенности использования ключевого слова super?
21. Что такое сигнатура метода? Приведите примеры правильных и неправильных сигнатур.
22. Можно ли в конструкторе применять return?
23. Можно ли в конструкторе выкинуть исключение (exception)?
24. Из каких элементов состоит заголовок класса? Напишите пример.
25. Из каких элементов состоит заголовок метода? Напишите пример.
26. Создайте в объекте-наследнике конструктор по умолчанию, если в базовом классе он не определен (но определен другой конструктор).
27. Когда применяется ключевое слово this?
28. Что такое инициализатор?
29. Для наследования класса public class Child extends Parent напишите порядок инициализации объекта.
30. Какие знаете отношения между классами (объектами)?
31. Какие ассоциативные связи между объектами вы знаете?
32. Что такое модификаторы доступа в Java? Назовите их. Для чего используются?
33. Назовите основную особенность статических переменных и методов.
34. Какие основные ограничения действуют на статические переменные и методы?
35. Что означает ключевое слово static? Может ли статический метод быть переопределенным или перегруженным?
36. Может ли метод быть статическим и абстрактным одновременно?
37. Можно ли использовать статические методы внутри обычных? Наоборот? Почему?
38. Что означает ключевое слово final?
39. Что такое abstract? Абстрактный класс? Абстрактный метод?
40. Что такое interface? Может ли быть final interface?
41. В чем разница между абстрактным классом и интерфейсом в Java?
42. Где можно инициализировать статические поля?
43. Что такое анонимные классы?
44. Что такое примитивные классы?
45. Что такое класс «обертка» (wrapper)?
46. Что такое Nested class? Когда используется?
47. Какие модификаторы доступа могут быть у класса?


## Библиотеки и стандарты
1. Что такое Hibernate? В чем разница между JPA i Hibernate?
2. Что такое каскадность? Как она используется в Hibernate?
3. Может ли entity-класс быть абстрактным классом?
4. Что такое entity manager? За что отвечает?
5. Что такое класс Assert? Зачем и как его использовать?


## String
1. Дайте характеристику String в Java.
2. Какие есть способы создания объекта String? Где он создается?
3. Как сравнить две строки в Java и/или отсортировать их?
4. Предложите алгоритм преобразования строки в знак. Напишите соответствующий код.
5. Как превратить строку в массив байтов и обратно? Напишите соответствующий код.
6. Что такое строковый пул и зачем он нужен?
7. Какие GOF-шаблоны применяются в строковом пуле?
8. Как разделить строку на части? Напишите соответствующий код.
9. Почему массив символов лучше, чем строка для хранения пароля?
10. Какая разница между String, StringBuffer и StringBuilder?


## Enum
1. Дайте краткую характеристику Enum в Java.
2. Может ли Enum реализовывать (implement) интерфейс?
3. Может ли Enum расширить (extends) класс?
4. Можно ли создать Enum без экземпляров объектов?
5. Можем ли мы переопределить метод toString() для Enum?
6. Что будет, если не будем переопределять метод toString() для Enum?
7. Можем ли мы указать конструктор внутри Enum?
8. В чем разница между == и equals()?
9. Что делает метод ordinal() в Enum?
10. Можно ли использовать Enum с TreeSet или TreeMap в Java?
11. Как связаны методы ordinal() и compareTo() в Enum?
12. Напишите пример Enum.
13. Можно ли использовать Enum в switch case?
14. Как получить все имеющиеся значения в экземпляре Enum?


## Stream API
1. Что такое Stream в Java?
2. Назовите основные свойства транзакций.
3. Какие есть уровни изоляции транзакций?
4. Какая разница между Statement и PreparedStatement?


## Collections
1. Расскажите об итераторах и об их применении.
2. Какая иерархия коллекций в Java Collection Framework?
3. Какое внутреннее строение ArrayList?
4. Какое внутреннее строение LinkedList?
5. Какое внутреннее строение HashMap?
6. Чем отличается ArrayList от LinkedList?
7. Чем отличается ArrayList от HashSet?
8. Зачем в Java такое многообразие имплементации динамического массива?
9. Зачем в Java такое многообразие имплементации key-value storage?
10. Как отсортировать коллекцию элементов?

 
## Class Object. Equals and HashCode
1. Дайте краткую характеристику class object в Java.
2. Для чего используют Equals and HashCode в Java?
3. Расскажите о контракте между Equals and HashCode в Java?
4. Какие условия выдвигаются касательно переопределения соглашения при переопределении Equals?
5. Что будет, если не переопределить Equals and HashCode?
6. Какие значения мы получим, если у нас не перераспределены Equals and HashCode?
7. Почему симметричность выполняется, только если x.equals(y) возвращает true?
8. Что такое коллизия в HashCode? Как с ней бороться?
9. Что будет, если элемент, участвующий в контракте с HashCode, меняет свое значение?
10. Напишите методы Equals and HashCode для класса Student, который состоит из полей String name и int age.
11. В чем разница применения if (obj instanceof Student) и if (getClass() == obj.getClass())?
12. Дайте краткую характеристику метода clone().
13. В чем заключается особенность работы метода clone() с полями объекта типа-ссылки?


## Exceptions
1. Дайте определение понятию exception (исключительная ситуация).
2. Какие знаете особенности использования оператора try ... catch?
3. В чем разница между error и exception?
4. Какая разница между checked и unchecked, exception, throw, throws.
5. Какой есть иерархия исключений?
6. Что такое checked и unchecked exception?
7. Нужно ли проверять checked exception?
8. О чем говорит и как использовать ключевое слово throws?
9. Какие возможные способы обработки исключений вы знаете?
10. Напишите пример перехвата и обработки исключения в блоке try-catch метода.
11. Напишите пример перехвата и обработки исключения в секции throws-метода и передачи вызывающему методу.
12. Напишите пример перехвата и обработки исключения с использованием собственных исключений.
13. Какие есть правила для проверки исключений при наследовании?
14. Могли бы ли вы написать код, если блок finally не будет выполнен?
15. Напишите пример обработки нескольких исключений в одном блоке catch.
16. Какой оператор позволяет принудительно выбросить исключение? Напишите пример.
17. Может ли метод main выбросить throws-исключение? Если да - куда передаст?
18. Напишите пример try with resources.


## Многопоточность
1. Какие средства для работы с многопоточностью знаете?
2. Что такое процесс и поток? Чем отличается процесс от потока?
    Процесс - это экземпляр программы во время выполнения, независимый объект, которому выделены системные ресурсы (процессорное вермя, память). Каждый процесс выполняется в отдельном адресном пространстве: один процесс не может получить доступ к переменным и структурам данных другого процесса. Если процесс хочет получить доступ к чужим ресурсам, необходимо использовать межпроцессное взаимодейсвтие. Это могут быть конвейеры, файлы, каналы связи между компьютерами и так далее.

    Поток - Определенный способ выполнения процесса. Поток использует пространство стека, что и процесс, а множество потоков совместно используют данные своих состояний. Как правило, каждый поок может работать (читать, писать) с одной и той же областью памяти, в отличие от процессов, которые не могут. Когда один поток изменяет ресурс процесса, это изменение сразу же становится видно другим потокам этого процесса.
    [Подробнее](https://habr.com/ru/post/164487)

3. Расскажите о синхронизации между потоками. Для чего используют методы wait(), notify() - notifyAll(), join()?
4. Как остановить поток?
5. Как между потоками обмениваться данными?
6. В чем заключается отличие класса Thread от интерфейса Runnable?
7. Есть потоки Т1, Т2 и Т3. Как реализовать их последовательное выполнение?


## SQL
1. В чем разница между DELETE и TRUNCATE?
2. Из каких подмножеств состоит SQL?
3. Что такое СУБД? Какие существуют типы СУБД?
4. Что такое таблица и поле в SQL?
5. Что такое соединения в SQL?
6. В чем разница между типом данных CHAR и VARCHAR в SQL?
7. Что такое Первичный ключ Primary key?
8. Что такое Внешний ключ Foreign key?
9. Что такое ограничения Constraints?
10. В чем разница между SQL и MySql?
11. Что такое уникальный ключ Unique key?
12. Что подразумевается под целостностью данных?
13. В чем разница между кластеризованным и некласттеризованным индексами в SQL?
14. Напишите SQL-запрос для отображение текущей даты.
15. Перечислите типы соединений.
16. Что такое денормализация?
17. Что такое сущности и отношения?
18. Что такое индекс?
19. Опишите различные типы индексов.
20. Что такое нормализация и каковы ее преимущества?
21. В чем разница между командами DROPи TRUNCATE?
22. Объясните различные типы нормализации.
23. Что такое ACID в базе данных?
24. Что подрузамеватеся под тригером в SQL?
25. Какие операторы доступны в SQL?
26. Совпадают ли значения NULL со значениями нуля или пробела?
27. В чем разница между перекрестным cross join и естественным natural join соединением?
28. Что такое подзапрос в SQL?
29. Какие бывают типы подзапросов?
30. Перечислите способы получить количество записей в таблице.


## Практические задания
1. Matrix Diagonal Sum (задача с Leetcode).
2. Move Zeroes (задача с Leetcode).
3. Дан List <String> names. Удалите первую букву из каждого имени и верните отсортированный список.
4. Перевернуть массив.
5. Проверить, является ли строка палиндромом.
6. Написать простой алгоритм сортировки (Bubble, Selection или Shuttle). Как его можно улучшить?
7. Напишите алгоритм (последовательность действий) составления литерала типа int и литералов типа byte. Объясните, что происходит с памятью.

## Array
1. Two Sum
2. Best Time to Buy and Sell Stock
3. Contains Duplicate
4. Product of Array Except Self
5. Maximum Subarray
6. Maximum Product Subarray
7. Find Minimum in Rotated Sorted Array
8. Search in Rotated Sorted Array
9. 3 Sum
10. Container With Most Water

## Binary
1. Sum of Two Integers
2. Number of 1 Bits
3. Counting Bits
4. Missing Number
5. Reverse Bits

## Dynamic Programming
1. Climbing Stairs
2. Coin Change
3. Longest Increasing Subsequence
4. Longest Common Subsequence
5. Word Break Problem
6. Combination Sum
7. House Robber
8. House Robber II
9. Decode Ways
10. Unique Paths
11. Jump Game

## Graph
1. Clone Graph
2. Course Schedule
3. Pacific Atlantic Water Flow
4. Number of Islands
5. Longest Consecutive Sequence
6. Alien Dictionary (Leetcode Premium)
7. Graph Valid Tree (Leetcode Premium)
8. Number of Connected Components in an Undirected Graph (Leetcode Premium)

## Interval
1. Insert Interval
2. Merge Intervals
3. Non-overlapping Intervals
4. Meeting Rooms (Leetcode Premium)
5. Meeting Rooms II (Leetcode Premium)

## Linked List
1. Reverse a Linked List
2. Detect Cycle in a Linked List
3. Merge Two Sorted Lists
4. Merge K Sorted Lists
5. Remove Nth Node From End Of List
6. Reorder List

## Matrix
1. Set Matrix Zeroes
2. Spiral Matrix
3. Rotate Image
4. Word Search

## String
1. Longest Substring Without Repeating Characters
2. Longest Repeating Character Replacement
3. Minimum Window Substring
4. Valid Anagram
5. Group Anagrams
6. Valid Parentheses
7. Valid Palindrome
8. Longest Palindromic Substring
9. Palindromic Substrings
10. Encode and Decode Strings (Leetcode Premium)

## Tree
1. Maximum Depth of Binary Tree
2. Same Tree
3. Invert/Flip Binary Tree
4. Binary Tree Maximum Path Sum
5. Binary Tree Level Order Traversal
6. Serialize and Deserialize Binary Tree
7. Subtree of Another Tree
8. Construct Binary Tree from Preorder and Inorder Traversal
9. Validate Binary Search Tree
10. Kth Smallest Element in a BST
11. Lowest Common Ancestor of BST
12. Implement Trie (Prefix Tree)
13. Add and Search Word
14. Word Search II

## Heap
1. Merge K Sorted Lists
2. Top K Frequent Elements
3. Find Median from Data Stream
