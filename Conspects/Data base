# Лекция 1. Основные понятия
## Базы данных
 __База данных (БД, DataBase, DB)__ — __совокупность данных__, организованных в соответствии с какой-то __структурой__, которая описывает __характеристики__ этих данных и __взаимоотношения__ между ними.
Это просто хранилище, которое содержит данные. Это может быть просто файл, например txt, json, xml или другого, но в современном мире этого недостаточно, поэтому существует
<br>

### Типы баз данных
[Статья про типы баз данных](https://proglib.io/p/11-tipov-sovremennyh-baz-dannyh-kratkie-opisaniya-shemy-i-primery-bd-2020-01-07)
1. __Простая структура__ — Текстовые файлы. Для работы с небольшими объемами информации.
<br>

2. __Иерархическая__ — В отличие от текстовых таблиц, в этом типе БД появляются связи между объектами. Каждая запись имеет одного "родителя". Это создает древовидную структуру, в которой записи классифицируются по их отношениям с цепочкой родительских записей.
<img src="./images/hierarchy_db.png" alt="alt text" width="700"/>
<br

3. __Сетевая__ — расширяют функциональность иерархических: записи могут иметь более одного родителя, а значит можно моделировать сложны еотношения.
<img src="./images/network_db.png" alt="alt text" width="200"/>
<br>

4. __Реляционная SQL__ — данные и связи между ними организованны с помощью таблиц. Каждый столбец в таблице имеет имя и тип. Каждая строка представляет отдельную запись или элемент данных в таблице, который содержит значение каждого из столбцов.
<img src="./images/relative_db.png" alt="alt text" width="400"/>
<br>

__Не реляционные NoSQL__ — имеется ввиду либо __"не-SQL"__, либо __"не только SQL"__.
5. __Ключ-значение__ — для хранения информации предоставляется ключ и объект данных, который нужно сохранить. Например JSON-объет, изображение или текст. Для запроса данных отправляем ключ, получаем blob-объект (binary large object) — массив двоичных данных.
<img src="./images/key_value.png" alt="alt text" width="300"/>
<br>

6. __Документная__ — "документоориентированная БД, хранилища документов", совместно используют базовую логику доступа и поиска __ключ-значение__. Ключ используется для уникальной идентификации данных. Такие базы хранятся в стуктурированных форматах: JSON, BSON или XML.
<img src="./images/document_db.png" alt="alt text" width="500"/>
<br>

7. __Графовая__ — Вместо сопоставление связей с таблицами и внешними ключами, графовые устанавливают связи, используя узлы, ребра и свойства.
<img src="./images/graph_db.png" alt="alt text" width="500"/>
<br>

8. __Колоночная__ — "нереляционное колоночное хранилище, база данных с широкими столбцами". Как и реляционная - БД хранит данные, исопльзуя строки и столбцы, но с другой связью. 
В реляционной БД все строки должны соответствовать фиксированной схеме. Схрема определяет, какие столбцы будут в таблице, какие типы данных и т.д. 
В колоночной базе вместо таблиц имеются - колоночные семейства. Семейства содержат строки, каждая строка определяет собственный формат. Строка состоит из уникального идентификатора, используемого для поиска, за которым следуют наборы имен и значений столбцов.
<img src="./images/column_db.png" alt="alt text" width="500"/>
<br>

9. __Временные ряды__ — созданы для сбора и управления элементами, меняющимися с течением времени. БОльшинство таких баз организованы в структуры, которые записывают значения для одного элемента. Например таблица для отслеживания температуры процессора. Каждое значение будет состоять из временной метки и показатели температуры.
<img src="./images/time_array_db.png" alt="alt text" width="400"/>
<br>

__Комбинированные типы__
10. __NewSQL__ — наследует реляционную структуру и логику, но построены с использованием более современных, масштабируемых конструкций. Цель — бОльшая масштабируемость чем в реляционной БД, более высокие гарантии согласованности, чем в NoSQL.
<br>

11. __Многомодельная__ — объединяет функционал нескольких БД. Совместное размещение данных из нескольких типов БД в одной системе позволяет выполнять новые операции, которые в противном случае были бы затруднены или невозможны.
<br>

## СУБД
* __СУБД (Система управления базами данных)__ — комплекс программных средств для __управления данными__. СУБД отвечает за:
    1. Поддержку языка БД,
    2. механизмы хранения и извлечения,
    3. оптимизацию процессов извлечения и т.д.
<br>

### Типы СУБД
1. __Файл-серверные__ — обработка всех данных происходит на __рабочих местах__, а сервер используется как __разделяемый накопитель__. Каждый пользователь __использует__ информацию и __вносит__ изменения в файлы данных и в индексные файлы. 
Чем __больше__ пользователей, тем __выше__ требования к разделеню данных - тем __меньше__ быстродействие.
В момент __записи__, может возникнуть __сбой сети__, __авария__ питания. В этом случае __компьютер пользователя__ прерывает работу и БД может оказаться __поврежденной__, а индексный файл — __разрушенным__. Переиндексация после сбоя может идти несколько часов.
Из-за этих проблем подобные СУБД можно считать устаревшими.
__Примеры:__
    1. Microsoft Access,
    2. Microsoft Visual FoxPro. 
<br>

2. __Клиент-серверные__ — В данной СУБД работа происходит на __сервере__ и не завиит от сбоев на __рабочих станциях__. Все запросы на работу с файлами __перехватываются сервером__. Все изменения вносятся только после того, как сервер получит сообщение, что __корректировка файла__ завершена. Это __исключает повреждение__ индексных файлов и существенно __повышает скорость__ работы.
__Недостатки:__
    - Высокие требования к пропускной способности куммуникационных каналов с сервером,
    - слабая защита данных от взлома,
    - высокая сложность администрирования и настройки,
    - необходимость использовать на клиентских местах мощные компьютеры,
    - сложность разработки системы, так как надо исполнять бизнес-логику и обеспечивать интерфейс с пользователем в одной программе. 
__Примеры:__
    1. MySQL,
    2. PostgreSQL
    3. Oracle
    4. MS SQL
    5. MariaDB
    6. MongoDB
    7. Redis
    8. Dgraph
<br>

3. __Встраиваемые__ — эти СУБД __не устанавливаются на сервере__, чтобы потом куча пользователей имели к ней доступ. Эти СУБД как правило поставляются в виде __библиотеки__, которая поставляется вместе __с программой__. И программа с этой СУБД работает на одном устройстве.
    1. SQLite
    2. ObjectDB
<br>


# Лекция 2. Реляционные СУБД.
Тереоретической основй служит __реляционная алгебра__. Реляционная алгебра определяет систему операций над отношениями (таблицами):
- объединение,
- пересечение,
- декартово произведение,
- выборка,
- проекция,
- соединение,
- деление.
[Основы реляционной алгебры](https://habr.com/ru/post/145381/)
Все эти операции выражаются через SQL.

## Части отношения (таблицы) в бд

__Сущность (entity)__ — Это тип объектов, которые должны храниться в базе данных. Сами объекты называют экземплярами данной сущности.
__Отношение (relationship)__ — На практике это таблица. Пусть дана совокупность типов данных (доменов) T1, T2,...,Tn. Тогда отношением R степени n называют подмножество декартова произведения множеств T1, T2,...Tn.
<img src="./images/decart_multiply.png" alt="alt text" width="200"/>
__Атрибут (atribute)__ — Это объекты, которые содержатся в сущностях.
__Домен (domain)__ Множество допустимых значений атрибута.
__Кортеж "строка, запись" (tuple)__ — Упорядоченный набор из N значений, по одному значению для каждого атрибута отношения.
__Результирующий набор (result set)__ — Это результат работы запроса.

## SQL
__SQL__ — непроцедурный язык и не язык общего назначения. Это язык, заточеный под работу с отношениями. Он не предназначен для реализации процедурной логики.
Результатом SQL является результирующий набор.
__SQL делится на:__
* __DDL (Data definition Language)__ — CREATE, ALTER, DROP. Создание, определение базы данных.
* __DML (Data Manipulation Language)__ — SELECT, INSERT, UPDATE, DELETE. Выборка, удаление, обновление внутри таблицы.
* __TCL (Transaction Control Language)__ — COMMIT, ROLLBACK, SAVEPOINT. Работа с транзакциями. Транзакция - это набор связных операций с БД.
* __DCL (Data Control Language)__ — GRANT, REVOKE, DENY. Управление доступом.
<br>

* __ANSI SQL-92__ — Все СУБД отличаются, у каждого есть свой диалект, но есть подчасть этих диалектов, которые в целом совпадают и эта подчасть регламентируется этим стандартом 92 года. Именно поэтому бОльшая часть запросов синтаксически либо полностью совпадает, либо очень похожи.
