## Spring - это и библиотека, и фреймворк. То есть он предоставляет каркас приложения, вдогонку к готовым методам.
Состоит из множества компонентов, что облегчает разработку на Java:
* Application COntext
* Dependency Injection
* Аналог JDBC
* Spring MVC - Компонент разработки WEB приложений
* Spring Security
* Spring Boot
* Spring WebFlow
* и дохрена других компонентов.

## Application Context, Dependency Injection.
Типичное Java приложение - это набор Java объектов, которые взаимодействуют и ссылаются на друг друга.
И вот эти ссылки друг на друга - называются Зависимости.
<img src="./images/Java_App_Dependency.png" alt="alt text" width="400"/>

Когда Java приложение запускается, все Java объекты создаются и помещаются в оперативную память. В ходе работы приложения, объекты могут добавляться\удаляться. Могут изменяться связи между объектами. Большое кол-во объектов и связей между ними встречается в любом более менее сложном Java приложении. Spring помогает в работе с множеством объектов.

Можно, конечно и без Spring обойтись, но это сложно и громостко. Так как придется очень много зависимостей обрабатывать. Код станет запутанным. Не прослеживается иерархия между объектами. У подклассов тоже могут быть зависимостей много. Куча лишнего кода.

Если исопльзовать Spring, то мы просто описываем необходимые нам объекты. А дальше Spring сам создает эти объекты и берет на себя управление этими объектами (их жизненный цикл и так далее)

<img src="./images/Spring_Application_Context_Dependency_Injection_example.png" alt="alt text" width="900"/>

Так же Spring сам внедряет нужные зависимости. Нам нужно тулько описать связь, дальше Spring все сделает за нас.
<img src="./images/Spring_Dependency_Injection_example.png" alt="alt text" width="900"/>

## Spring Intellij Idea настройка
Лучше всего создать через создание проекта Maven. Затем на сайте [Maven repository](https://mvnrepository.com/) найти Нужные зависимости и указать их в Maven.pom
<img src="./images/maven_pom_example_dependency.png" alt="alt text" width="900"/>