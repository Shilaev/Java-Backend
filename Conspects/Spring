## Spring - это и библиотека, и фреймворк. То есть он предоставляет каркас приложения, вдогонку к готовым методам.
Состоит из множества компонентов, что облегчает разработку на Java:
* Application COntext
* Dependency Injection
* Аналог JDBC
* Spring MVC - Компонент разработки WEB приложений
* Spring Security
* Spring Boot
* Spring WebFlow
* и дохрена других компонентов.

## Application Context, Dependency Injection.
Типичное Java приложение - это набор Java объектов, которые взаимодействуют и ссылаются на друг друга.
И вот эти ссылки друг на друга - называются Зависимости.
<img src="./images/Java_App_Dependency.png" alt="alt text" width="400"/>

Когда Java приложение запускается, все Java объекты создаются и помещаются в оперативную память. В ходе работы приложения, объекты могут добавляться\удаляться. Могут изменяться связи между объектами. Большое кол-во объектов и связей между ними встречается в любом более менее сложном Java приложении. Spring помогает в работе с множеством объектов.

Можно, конечно и без Spring обойтись, но это сложно и громостко. Так как придется очень много зависимостей обрабатывать. Код станет запутанным. Не прослеживается иерархия между объектами. У подклассов тоже могут быть зависимостей много. Куча лишнего кода.

Если исопльзовать Spring, то мы просто описываем необходимые нам объекты. А дальше Spring сам создает эти объекты и берет на себя управление этими объектами (их жизненный цикл и так далее)

<img src="./images/Spring_Application_Context_Dependency_Injection_example.png" alt="alt text" width="900"/>

Так же Spring сам внедряет нужные зависимости. Нам нужно тулько описать связь, дальше Spring все сделает за нас.
<img src="./images/Spring_Dependency_Injection_example.png" alt="alt text" width="900"/>

## Spring Intellij Idea настройка
Лучше всего создать через создание проекта Maven. Затем на сайте [Maven repository](https://mvnrepository.com/) найти Нужные зависимости и указать их в Maven.pom
<img src="./images/maven_pom_example_dependency.png" alt="alt text" width="900"/>

# Инверсия управления
Проблема в том, что в коде очень часто появляются зависимости.
<img src="./images/inversion_of_control.png" alt="alt text" width="900"/>
<img src="./images/inversion_of_control2.png" alt="alt text" width="900"/>

```Java
interface Music {
}

class Deathcore implements Music {
}

class Mathhcore implements Music {
}

/*
public class MyMusicPlayer {
    private Music music;

    public void playDeathcore() {
        music = new Deathcore();
    }

    public void playMathcore() {
        music = new Mathhcore();
    }
}
 */

public class MyMusicPlayer {
    Music music;

    public MyMusicPlayer(Music music) {
        this.music = music;
    }

    public void playMusic(){
        System.out.println(music.toString());
    }
}
```

## Bean
Это просто Java объект. Когда Java объекты создаются с помощью Spring, они называются бинами. Бины создаются из Java классов (так же, как и обычные объекты)
```XML
<bean id="testBean"
      class = "ru.shilaev.TestBean">
      <constructor-arg value="Neil"/>
</bean>
```

Спринг файлы можно конфигурировать через:
1) XML
2) Java аннотации и XML
3) Java код

## Типичные шаги при разработке с помощью Spring
- Создать Java классы - будущие бины
- Создать бины и связать их с помощью спринга
- При использовании все бины брать из контейнера Spring

## Способы внедрения зависимостей
- через конструктор
- через setter
- scope, factory method и т.д
- xml, аннотации, java-code
- autowiring - авоматизированная система внедрения зависимостей

## Внедрение зависимости через XML
Используем конструктор
```XML
<bean id="musicBean" class="shilaev.MusicPlayerExample.Rap"/>

<bean id="musicPlayerBean" class="shilaev.MusicPlayerExample.MusicPlayer">
   <constructor-arg ref="musicBean"/>
</bean>
```

Используем setter
```XML
<bean id="musicPlayerBean" class="shilaev.MusicPlayerExample.MusicPlayer">
    <property name="music" ref="musicBean"/>
</bean>
```

используем файл .properties
внутри файла все выглядит так
musicPlayer.volume=50
```XML
<context:property-placeholder location="musicPlayer.properties"/>
<bean id="musicPlayerBean" class="shilaev.MusicPlayerExample.MusicPlayer">
    <constructor-arg ref="musicBean"/>
    <property name="volume" value="${musicPlayer.volume}"/>
</bean>
```
Несколько значений сразу
```XML
<bean id="musicPlayerBean" class="shilaev.MusicPlayerExample.MusicPlayer">
    <property name="volume" value="${musicPlayer.volume}"/>
    <property name="musicList">
        <list>
            <ref bean="deathcoreMusicBean"/>
            <ref bean="rapMusicBean"/>
            <ref bean="neoClassicalMusicBean"/>
        </list>
    </property>
</bean>
```